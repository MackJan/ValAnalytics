name: Build and Release Agent

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        cd agent/src
        pip install -r requirements.txt

    - name: Build executable
      run: |
        cd agent/src
        pyinstaller main.spec

    - name: Prepare release artifacts
      run: |
        mkdir release
        copy "agent\src\dist\main.exe" "release\ValorantPerformanceTracker.exe"

    - name: Get version from tag
      id: get_version
      run: |
        if ($env:GITHUB_REF -match "refs/tags/(.*)") {
          $version = $matches[1]
        } else {
          $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: pwsh

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Valorant Performance Tracker ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Valorant Performance Tracker Agent
          
          ### Installation
          1. Download the `ValorantPerformanceTracker.exe` file
          2. Run the executable
          
          ### What's New
          - Automated build from latest code
          - Single executable file for easy distribution
          
          ### System Requirements
          - Windows 10/11
          - Discord installed (for Rich Presence features)

        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/ValorantPerformanceTracker.exe
        asset_name: ValorantPerformanceTracker.exe
        asset_content_type: application/octet-stream

  build-multi-platform:
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        cd agent/src
        pip install -r requirements.txt

    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd agent/src
        pyinstaller main.spec

    - name: Build executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd agent/src
        pyinstaller --onefile main.py

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
      shell: bash

    - name: Copy Windows artifact
      if: matrix.os == 'windows-latest'
      run: |
        copy "agent\src\dist\main.exe" "artifacts\ValorantPerformanceTracker-windows.exe"
      shell: cmd

    - name: Copy Linux artifact
      if: matrix.os == 'ubuntu-latest'
      run: |
        cp agent/src/dist/main artifacts/ValorantPerformanceTracker-linux
        chmod +x artifacts/ValorantPerformanceTracker-linux

    - name: Copy macOS artifact
      if: matrix.os == 'macos-latest'
      run: |
        cp agent/src/dist/main artifacts/ValorantPerformanceTracker-macos
        chmod +x artifacts/ValorantPerformanceTracker-macos

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}
        path: artifacts/
