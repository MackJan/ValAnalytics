name: Build and Deploy

on:
  push:
    branches: [ main, master, full-prototype ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build and push backend image
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build and push frontend image
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create deployment docker-compose
      run: |
        # Create a production docker-compose file
        cat > docker-compose.prod.yml << EOF
        services:
          postgres:
            image: postgres:13
            environment:
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: \${{ secrets.POSTGRES_PASSWORD }}
              POSTGRES_DB: valorant
            volumes:
              - pgdata:/var/lib/postgresql/data
            ports:
              - "5432:5432"
            networks:
              - app_network
            healthcheck:
              interval: 5s
              test: ["CMD", "pg_isready", "-U", "postgres"]
            restart: unless-stopped

          backend:
            image: ${{ needs.build-and-push.outputs.backend-image }}
            depends_on:
              postgres:
                condition: service_healthy
            environment:
              - DATABASE_URL=postgresql+asyncpg://postgres:\${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/valorant
              - REDIS_URL=redis://redis:6379/0
              - SECRET_KEY=\${{ secrets.SECRET_KEY }}
            ports:
              - "8000:8000"
            networks:
              - app_network
            restart: unless-stopped
            command: >
              sh -c "alembic upgrade head &&
                     uvicorn app.main:app --host 0.0.0.0 --port 8000"

          frontend:
            image: ${{ needs.build-and-push.outputs.frontend-image }}
            depends_on:
              - backend
            ports:
              - "5173:5173"
            networks:
              - app_network
            restart: unless-stopped

        volumes:
          pgdata:

        networks:
          app_network:
            driver: bridge
        EOF

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        source: "docker-compose.prod.yml"
        target: "/home/${{ secrets.USERNAME }}/performance-tracker/"

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd /home/${{ secrets.USERNAME }}/performance-tracker/
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest images
          docker compose -f docker-compose.prod.yml pull
          
          # Stop and remove old containers
          docker compose -f docker-compose.prod.yml down
          
          # Start the application
          docker compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          echo "Deployment completed successfully!"
