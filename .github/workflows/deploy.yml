name: Build and Deploy

on:
  push:
    branches: [ main, master, full-prototype ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      repo-owner-lower: ${{ steps.lowercase.outputs.repo-owner }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Convert repository owner to lowercase
      id: lowercase
      run: |
        echo "repo-owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build and push backend image
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build and push frontend image
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=/api
          VITE_WS_URL=wss://janmack.de

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/full-prototype'

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd /home/${{ secrets.USERNAME }}/performance-tracker/
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Extract the latest tag from the build outputs
          BACKEND_IMAGE=$(echo '${{ needs.build-and-push.outputs.backend-image }}' | grep ':latest' || echo '${{ needs.build-and-push.outputs.backend-image }}' | head -n1)
          FRONTEND_IMAGE=$(echo '${{ needs.build-and-push.outputs.frontend-image }}' | grep ':latest' || echo '${{ needs.build-and-push.outputs.frontend-image }}' | head -n1)
          
          echo "Backend image: $BACKEND_IMAGE"
          echo "Frontend image: $FRONTEND_IMAGE"
          
          # Create .env file with actual image tags from build
          cat > .env << EOF
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          VPT_API_KEY=${{ secrets.VPT_API_KEY }}
          BACKEND_IMAGE=$BACKEND_IMAGE
          FRONTEND_IMAGE=$FRONTEND_IMAGE
          EOF
          
          # Pull the latest images explicitly
          docker pull $BACKEND_IMAGE
          docker pull $FRONTEND_IMAGE
          
          # Stop and remove old containers
          docker compose down
          
          # Remove old images to free up space
          docker image prune -f
          
          # Start the application with the new images
          docker compose up -d
          
          # Show running containers for verification
          docker compose ps
          
          echo "Deployment completed successfully!"
